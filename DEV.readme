1 - create-react-app@14.2.16
2 - instalar prisma 5.1.21
2.1 - instalar prisma client npm install @prisma/client@5.21.1
2.2 - criar classe prisma ts
3 - criar con na neon, e mudar o computed para o minimo para consumir menos valor possivel
4 - configurar conection string no env
5 - gerar migration
6 - instalar > npx shadcn@2.1.3 int 
mover para lib para dentro de app e colocar _ na frente pra deixar privada
alterar o componentes.json arquivos de cofiguracao dos compoentes do shadcn colocando para apontar dentro da pasta app
7 - clerk autenticacao npm install @clerk/nextjs@5.7.5
8 - clerk themes npm install @clerk/themes@2.1.37
9 - npm install react-number-format@5.4.2 
10 - npm install stripe@17.3.1
11 - npm install @stripe/stripe-js@4.9.0


componentes
npx shadcn@2.1.3 add table
npm install @tanstack/react-table
npx shadcn@2.1.3 add button
npx shadcn@2.1.3 add badge
npx shadcn@2.1.3 add dialog
npx shadcn@2.1.3 add form
npx shadcn@2.1.3 add input
npx shadcn@2.1.3 add select
npx shadcn@2.1.3 add popover calendar // datepicker
npx shadcn@2.1.3 add card
npx shadcn@2.1.3 add chart
npx shadcn@2.1.3 add scroll-area
npx shadcn@2.1.3 add progress

asChild // usa para dizer que deve renderizar o filho, verificar os casos onde foi usado


react-hook-form // para construir formulario
zod // para validar

extensoes
- simple react snippets
- tailwind intelisense
- instalar eslint
- instalar Prettier - Code formatter
- instalar Plugin Prettier para tailwind,  doc https://tailwindcss.com/blog/automatic-class-sorting-with-prettier
   npm install -D prettier prettier-plugin-tailwindcss 

  
nest obs.:
_ na frente do nome da pasta para deixar privada


git hooks sao comandos que rodamos antes de fazer um commit
formatar codigo com prettier e rodar eslint independente do usuario ter ou nao na maquina

npm install -D husky@9.1.6
npm install -D lint-staged@12.3.2

// para inicializar o husky no projeto
npx husky init 

// vai criar o arquivo pre-commit dentro dele configuramos o que queremos rodar antes do commit

ex.
npx lint-staged // só roda o comando nos arquivos "staged" ou seja que vao subir
criamos o arquivo .lintstagedrc.json na raiz do projeto com a configuracao para filtrar apenas os arquivos staged para que sejam formatados


conventional commits 
npm install git-commit-msg-linter@5.0.8


npx prisma migrate dev // em dev
npx prisma migrate deploy // em producao
npx prisma migrate dev --name add_user_id_to_transaction // add migration
npx prisma studio // abre console de banco

todo componentes criado no next é um server componente por padrãos
todo arquivo statico coloca na pasta public, o next já otimiza com um cache/cdn

client components > server actions
toda variavel de ambiente que possui NEXT_PUBLIC sao acessiveis por client componentes

https://medium.com/@khalil.abid.tn/mastering-next-js-structuring-your-large-scale-project-for-success-6135773e21b0



# integration with strype

1 - create a product